-- Exclusão das tabelas
--DROP TABLE Usuarios CASCADE CONSTRAINTS;
--DROP TABLE ItensReciclados CASCADE CONSTRAINTS;
--DROP TABLE Recompensas CASCADE CONSTRAINTS;
--DROP TABLE Amigos CASCADE CONSTRAINTS;
--DROP TABLE ReconhecimentoItens CASCADE CONSTRAINTS;
--DROP TABLE Localizacoes CASCADE CONSTRAINTS;
--DROP TABLE Configuracoes CASCADE CONSTRAINTS;
--DROP TABLE Usuarios_Amigos CASCADE CONSTRAINTS;
--DROP TABLE LogErros CASCADE CONSTRAINTS;




CREATE TABLE Usuarios (
    usuario_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_usuario VARCHAR2(50) NOT NULL,
    senha_hash VARCHAR2(256) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    data_registro DATE,
    localizacao VARCHAR2(100),
    foto_perfil VARCHAR2(256)
);

CREATE TABLE ItensReciclados (
    item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo_item VARCHAR2(50) NOT NULL,
    data_coleta DATE,
    localizacao VARCHAR2(100),
    quantidade INTEGER NOT NULL
);

CREATE TABLE Recompensas (
    recompensa_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pontos INTEGER NOT NULL,
    tipo_recompensa VARCHAR2(50) NOT NULL,
    data_resgate DATE,
    usuario_id INTEGER NOT NULL,
    CONSTRAINT fk_usuario_recompensas FOREIGN KEY (usuario_id) REFERENCES Usuarios(usuario_id)
);

CREATE TABLE Amigos (
    amigo_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data_amizade DATE
);

CREATE TABLE ReconhecimentoItens (
    reconhecimento_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    url_imagem VARCHAR2(256),
    tipo_item VARCHAR2(50),
    data_reconhecimento DATE,
    localizacao VARCHAR2(100),
    usuario_id INTEGER NOT NULL,
    CONSTRAINT fk_usuario_reconhecimento FOREIGN KEY (usuario_id) REFERENCES Usuarios(usuario_id)
);

CREATE TABLE Localizacoes (
    localizacao_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_localizacao VARCHAR2(100) NOT NULL,
    latitude INTEGER,
    longitude INTEGER,
    descricao VARCHAR2(256),
    item_id INTEGER NOT NULL,
    usuario_id INTEGER NOT NULL,
    CONSTRAINT fk_localizacao_item FOREIGN KEY (item_id) REFERENCES ItensReciclados(item_id),
    CONSTRAINT fk_localizacao_usuario FOREIGN KEY (usuario_id) REFERENCES Usuarios(usuario_id)
);

CREATE TABLE Configuracoes (
    configuracao_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_configuracao VARCHAR2(50) NOT NULL,
    valor_configuracao VARCHAR2(100),
    usuario_id INTEGER NOT NULL,
    CONSTRAINT fk_usuario_configuracao FOREIGN KEY (usuario_id) REFERENCES Usuarios(usuario_id)
);

CREATE TABLE Usuarios_Amigos (
    usuario_id INTEGER NOT NULL,
    amigo_id INTEGER NOT NULL,
    data_amizade DATE,
    PRIMARY KEY (usuario_id, amigo_id),
    CONSTRAINT fk_usuario_amigo FOREIGN KEY (usuario_id) REFERENCES Usuarios(usuario_id),
    CONSTRAINT fk_amigo_usuario FOREIGN KEY (amigo_id) REFERENCES Amigos(amigo_id)
);


CREATE TABLE LogErros (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome_procedure VARCHAR2(100),
    nome_usuario VARCHAR2(50),
    data_ocorrencia DATE DEFAULT SYSDATE,
    codigo_erro NUMBER,
    mensagem_erro VARCHAR2(4000)
);

-- Constraints adicionadas para relacionamento adicional entre as tabelas
ALTER TABLE Usuarios
    DROP CONSTRAINT fk_usuarios_configuracao;

ALTER TABLE Usuarios
    DROP CONSTRAINT fk_usuarios_recompensa;

ALTER TABLE Usuarios
    DROP CONSTRAINT fk_usuarios_reconhecimento;




-- Procedures

CREATE OR REPLACE PROCEDURE inserir_usuario (
    p_nome_usuario IN VARCHAR2,
    p_senha_hash IN VARCHAR2,
    p_email IN VARCHAR2,
    p_localizacao IN VARCHAR2,
    p_foto_perfil IN VARCHAR2
) IS
BEGIN
    INSERT INTO Usuarios (nome_usuario, senha_hash, email, localizacao, foto_perfil, data_registro)
    VALUES (p_nome_usuario, p_senha_hash, p_email, p_localizacao, p_foto_perfil, SYSDATE);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_usuario', p_nome_usuario, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao inserir usuário: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_usuario', p_nome_usuario, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao inserir usuário: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_usuario', p_nome_usuario, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao inserir usuário: ' || v_msg_erro);
            RAISE;
        END;
END;


-- Teste de inserção de usuário
-- Teste de inserção de usuário com tratamento de exceções específicas
SET SERVEROUTPUT ON;
DECLARE
    v_nome_usuario VARCHAR2(50) := 'Joao Silva';
    v_senha_hash VARCHAR2(256) := 'hash123';
    v_email VARCHAR2(100) := 'joao.silva@example.com';
    v_localizacao VARCHAR2(100) := 'São Paulo';
    v_foto_perfil VARCHAR2(256) := 'foto_joao.jpg';
BEGIN
    inserir_usuario(v_nome_usuario, v_senha_hash, v_email, v_localizacao, v_foto_perfil);
    DBMS_OUTPUT.PUT_LINE('Usuário inserido com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir usuário: ' || SQLERRM);
END;




CREATE OR REPLACE PROCEDURE atualizar_usuario (
    p_usuario_id IN NUMBER,
    p_nome_usuario IN VARCHAR2,
    p_senha_hash IN VARCHAR2,
    p_email IN VARCHAR2,
    p_localizacao IN VARCHAR2,
    p_foto_perfil IN VARCHAR2
) IS
BEGIN
    UPDATE Usuarios
    SET nome_usuario = p_nome_usuario,
        senha_hash = p_senha_hash,
        email = p_email,
        localizacao = p_localizacao,
        foto_perfil = p_foto_perfil
    WHERE usuario_id = p_usuario_id;
EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_usuario', p_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de atualização de usuário
SET SERVEROUTPUT ON;
DECLARE
    v_usuario_id NUMBER := 1; 
    v_nome_usuario VARCHAR2(50) := 'Joao Silva';
    v_senha_hash VARCHAR2(256) := 'newhash123';
    v_email VARCHAR2(100) := 'joao.silva@newexample.com';
    v_localizacao VARCHAR2(100) := 'Rio de Janeiro';
    v_foto_perfil VARCHAR2(256) := 'foto_joao_new.jpg';
BEGIN
    atualizar_usuario(v_usuario_id, v_nome_usuario, v_senha_hash, v_email, v_localizacao, v_foto_perfil);
    DBMS_OUTPUT.PUT_LINE('Usuário atualizado com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao atualizar usuário: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE excluir_usuario (
    p_usuario_id IN NUMBER
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;

    -- Excluir dependências antes de excluir o usuário
    DELETE FROM Usuarios_Amigos WHERE usuario_id = p_usuario_id OR amigo_id = p_usuario_id;
    DELETE FROM Configuracoes WHERE usuario_id = p_usuario_id;
    DELETE FROM Recompensas WHERE usuario_id = p_usuario_id;
    DELETE FROM ReconhecimentoItens WHERE usuario_id = p_usuario_id;
    DELETE FROM Localizacoes WHERE usuario_id = p_usuario_id;

    DELETE FROM Usuarios WHERE usuario_id = p_usuario_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Usuário não encontrado.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_usuario', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;



--Teste de exclusão de Usuario
DECLARE
    v_usuario_id NUMBER := 1; 
BEGIN
    excluir_usuario(v_usuario_id);
    DBMS_OUTPUT.PUT_LINE('Usuário excluído com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir usuário: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE inserir_item_reciclado (
    p_tipo_item IN VARCHAR2,
    p_data_coleta IN DATE,
    p_localizacao IN VARCHAR2,
    p_quantidade IN NUMBER
) IS
BEGIN
    INSERT INTO ItensReciclados (tipo_item, data_coleta, localizacao, quantidade)
    VALUES (p_tipo_item, p_data_coleta, p_localizacao, p_quantidade);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_item_reciclado', NULL, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao inserir item reciclado: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_item_reciclado', NULL, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao inserir item reciclado: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_item_reciclado', NULL, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao inserir item reciclado: ' || v_msg_erro);
            RAISE;
        END;
END;


-- Teste de inserção de item reciclado
-- Teste de inserção de item reciclado com tratamento de exceções específicas
SET SERVEROUTPUT ON;
DECLARE
    v_tipo_item VARCHAR2(50) := 'Papel';
    v_data_coleta DATE := SYSDATE;
    v_localizacao VARCHAR2(100) := 'São Paulo';
    v_quantidade NUMBER := 10;
BEGIN
    inserir_item_reciclado(v_tipo_item, v_data_coleta, v_localizacao, v_quantidade);
    DBMS_OUTPUT.PUT_LINE('Item reciclado inserido com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir item reciclado: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE atualizar_item_reciclado (
    p_item_id IN NUMBER,
    p_tipo_item IN VARCHAR2,
    p_data_coleta IN DATE,
    p_localizacao IN VARCHAR2,
    p_quantidade IN NUMBER
) IS
BEGIN
    UPDATE ItensReciclados
    SET tipo_item = p_tipo_item,
        data_coleta = p_data_coleta,
        localizacao = p_localizacao,
        quantidade = p_quantidade
    WHERE item_id = p_item_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Item não encontrado para atualização.');
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_item_reciclado', NULL, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao atualizar item reciclado: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_item_reciclado', NULL, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao atualizar item reciclado: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_item_reciclado', NULL, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao atualizar item reciclado: ' || v_msg_erro);
            RAISE;
        END;
END;


-- Teste de atualização de item reciclado
-- Teste de atualização de item reciclado com tratamento de exceções específicas
DECLARE
    v_item_id NUMBER := 1; 
    v_tipo_item VARCHAR2(50) := 'Plástico';
    v_data_coleta DATE := SYSDATE;
    v_localizacao VARCHAR2(100) := 'Rio de Janeiro';
    v_quantidade NUMBER := 20;
BEGIN
    atualizar_item_reciclado(v_item_id, v_tipo_item, v_data_coleta, v_localizacao, v_quantidade);
    DBMS_OUTPUT.PUT_LINE('Item reciclado atualizado com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao atualizar item reciclado: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE excluir_item_reciclado (
    p_item_id IN NUMBER
) IS
BEGIN
    DELETE FROM ItensReciclados WHERE item_id = p_item_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Item não encontrado para exclusão.');
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_item_reciclado', NULL, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao excluir item reciclado: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_item_reciclado', NULL, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao excluir item reciclado: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_item_reciclado', NULL, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao excluir item reciclado: ' || v_msg_erro);
            RAISE;
        END;
END;



-- Teste de exclusão de item reciclado
-- Teste de exclusão de item reciclado com tratamento de exceções específicas
DECLARE
    v_item_id NUMBER := 1;
BEGIN
    excluir_item_reciclado(v_item_id);
    DBMS_OUTPUT.PUT_LINE('Item reciclado excluído com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir item reciclado: ' || SQLERRM);
END;




CREATE OR REPLACE PROCEDURE inserir_recompensa (
    p_usuario_id IN NUMBER,
    p_pontos IN NUMBER,
    p_tipo_recompensa IN VARCHAR2,
    p_data_resgate IN DATE
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    BEGIN
        SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_nome_usuario := 'Usuário não encontrado';
            DBMS_OUTPUT.PUT_LINE('Erro: Usuário não encontrado para o ID: ' || p_usuario_id);
            RETURN;
    END;
    
    INSERT INTO Recompensas (usuario_id, pontos, tipo_recompensa, data_resgate)
    VALUES (p_usuario_id, p_pontos, p_tipo_recompensa, p_data_resgate);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_recompensa', v_nome_usuario, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao inserir recompensa: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_recompensa', v_nome_usuario, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao inserir recompensa: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_recompensa', v_nome_usuario, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao inserir recompensa: ' || v_msg_erro);
            RAISE;
        END;
END;



-- Teste de inserção de recompensa
-- Teste de inserção de recompensa com tratamento de exceções específicas
SET SERVEROUTPUT ON;
DECLARE
    v_usuario_id NUMBER := 2;
    v_pontos NUMBER := 100;
    v_tipo_recompensa VARCHAR2(50) := 'Desconto';
    v_data_resgate DATE := SYSDATE;
BEGIN
    inserir_recompensa(v_usuario_id, v_pontos, v_tipo_recompensa, v_data_resgate);
    DBMS_OUTPUT.PUT_LINE('Recompensa inserida com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir recompensa: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE atualizar_recompensa (
    p_recompensa_id IN NUMBER,
    p_usuario_id IN NUMBER,
    p_pontos IN NUMBER,
    p_tipo_recompensa IN VARCHAR2,
    p_data_resgate IN DATE
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    BEGIN
        SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_nome_usuario := 'Usuário não encontrado';
            DBMS_OUTPUT.PUT_LINE('Erro: Usuário não encontrado para o ID: ' || p_usuario_id);
            RETURN;
    END;
    
    UPDATE Recompensas
    SET usuario_id = p_usuario_id,
        pontos = p_pontos,
        tipo_recompensa = p_tipo_recompensa,
        data_resgate = p_data_resgate
    WHERE recompensa_id = p_recompensa_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Recompensa não encontrada para atualização.');
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_recompensa', v_nome_usuario, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao atualizar recompensa: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_recompensa', v_nome_usuario, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao atualizar recompensa: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_recompensa', v_nome_usuario, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao atualizar recompensa: ' || v_msg_erro);
            RAISE;
        END;
END;


-- Teste de atualização de recompensa
-- Teste de atualização de recompensa com tratamento de exceções específicas
DECLARE
    v_recompensa_id NUMBER := 1;
    v_usuario_id NUMBER := 1; 
    v_pontos NUMBER := 150;
    v_tipo_recompensa VARCHAR2(50) := 'Vale Compras';
    v_data_resgate DATE := SYSDATE + 1;
BEGIN
    atualizar_recompensa(v_recompensa_id, v_usuario_id, v_pontos, v_tipo_recompensa, v_data_resgate);
    DBMS_OUTPUT.PUT_LINE('Recompensa atualizada com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao atualizar recompensa: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE excluir_recompensa (
    p_recompensa_id IN NUMBER
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    BEGIN
        SELECT nome_usuario INTO v_nome_usuario 
        FROM Usuarios 
        WHERE usuario_id = (SELECT usuario_id FROM Recompensas WHERE recompensa_id = p_recompensa_id);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_nome_usuario := 'Usuário não encontrado';
            DBMS_OUTPUT.PUT_LINE('Erro: Recompensa não encontrada ou usuário não encontrado.');
            RETURN;
    END;
    
    DELETE FROM Recompensas WHERE recompensa_id = p_recompensa_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Recompensa não encontrada.');
    WHEN DUP_VAL_ON_INDEX THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_recompensa', v_nome_usuario, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao excluir recompensa: ' || v_msg_erro);
            RAISE;
        END;
    WHEN VALUE_ERROR THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_recompensa', v_nome_usuario, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao excluir recompensa: ' || v_msg_erro);
            RAISE;
        END;
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_recompensa', v_nome_usuario, v_cod_erro, v_msg_erro);
            DBMS_OUTPUT.PUT_LINE('Erro ao excluir recompensa: ' || v_msg_erro);
            RAISE;
        END;
END;


-- Teste de exclusão de recompensa
-- Teste de exclusão de recompensa com tratamento de exceções específicas
DECLARE
    v_recompensa_id NUMBER := 1; 
BEGIN
    excluir_recompensa(v_recompensa_id);
    DBMS_OUTPUT.PUT_LINE('Recompensa excluída com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir recompensa: ' || SQLERRM);
END;




CREATE OR REPLACE PROCEDURE inserir_amigo (
    p_usuario_id IN NUMBER,
    p_amigo_id IN NUMBER
) IS
    v_nome_usuario VARCHAR2(50);
    v_nome_amigo VARCHAR2(50);
BEGIN
    BEGIN
        SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Erro: Usuário não encontrado para o ID: ' || p_usuario_id);
            RETURN;
    END;
    
    BEGIN
        SELECT nome_usuario INTO v_nome_amigo FROM Usuarios WHERE usuario_id = p_amigo_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Erro: Amigo não encontrado para o ID: ' || p_amigo_id);
            RETURN;
    END;
    
    BEGIN
        INSERT INTO Amigos (amigo_id)
        VALUES (p_amigo_id);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DECLARE
                v_cod_erro NUMBER := SQLCODE;
                v_msg_erro VARCHAR2(4000) := SQLERRM;
            BEGIN
                INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
                VALUES ('inserir_amigo', v_nome_usuario || ' e ' || v_nome_amigo, v_cod_erro, 'Erro de valor duplicado: ' || v_msg_erro);
                DBMS_OUTPUT.PUT_LINE('Erro de valor duplicado ao inserir amigo: ' || v_msg_erro);
                RETURN;
            END;
        WHEN VALUE_ERROR THEN
            DECLARE
                v_cod_erro NUMBER := SQLCODE;
                v_msg_erro VARCHAR2(4000) := SQLERRM;
            BEGIN
                INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
                VALUES ('inserir_amigo', v_nome_usuario || ' e ' || v_nome_amigo, v_cod_erro, 'Erro de valor inválido: ' || v_msg_erro);
                DBMS_OUTPUT.PUT_LINE('Erro de valor inválido ao inserir amigo: ' || v_msg_erro);
                RETURN;
            END;
        WHEN OTHERS THEN
            DECLARE
                v_cod_erro NUMBER := SQLCODE;
                v_msg_erro VARCHAR2(4000) := SQLERRM;
            BEGIN
                INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
                VALUES ('inserir_amigo', v_nome_usuario || ' e ' || v_nome_amigo, v_cod_erro, v_msg_erro);
                DBMS_OUTPUT.PUT_LINE('Erro ao inserir amigo: ' || v_msg_erro);
                RETURN;
            END;
    END;
END;



-- Teste de inserção de amigo
-- Teste de inserção de amigo com tratamento de exceções específicas
SET SERVEROUTPUT ON;
DECLARE
    v_usuario_id NUMBER := 1; 
    v_amigo_id NUMBER := 2;
BEGIN
    inserir_amigo(v_usuario_id, v_amigo_id);
    DBMS_OUTPUT.PUT_LINE('Amigo inserido com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir amigo: ' || SQLERRM);
END;




CREATE OR REPLACE PROCEDURE excluir_amigo (
    p_usuario_id IN NUMBER,
    p_amigo_id IN NUMBER
) IS
    v_nome_usuario VARCHAR2(50);
    v_nome_amigo VARCHAR2(50);
BEGIN
    BEGIN
        SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Erro: Usuário não encontrado para o ID: ' || p_usuario_id);
            RETURN;
    END;
    
    BEGIN
        SELECT nome_usuario INTO v_nome_amigo FROM Usuarios WHERE usuario_id = p_amigo_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Erro: Amigo não encontrado para o ID: ' || p_amigo_id);
            RETURN;
    END;
    
    BEGIN
        DELETE FROM Amigos WHERE amigo_id = p_amigo_id; -- Correção aqui
        IF SQL%ROWCOUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Amizade não encontrada.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Amizade excluída com sucesso.');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DECLARE
                v_cod_erro NUMBER := SQLCODE;
                v_msg_erro VARCHAR2(4000) := SQLERRM;
            BEGIN
                INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
                VALUES ('excluir_amigo', v_nome_usuario || ' e ' || v_nome_amigo, v_cod_erro, v_msg_erro);
                RAISE;
            END;
        END;
END;


-- Teste de exclusão de amigo
DECLARE
    v_usuario_id NUMBER := 1;
    v_amigo_id NUMBER := 2; 
BEGIN
    excluir_amigo(v_usuario_id, v_amigo_id);
    DBMS_OUTPUT.PUT_LINE('Amigo excluído com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir amigo: ' || SQLERRM);
END;




CREATE OR REPLACE PROCEDURE inserir_reconhecimento_item (
    p_usuario_id IN NUMBER,
    p_url_imagem IN VARCHAR2,
    p_tipo_item IN VARCHAR2,
    p_localizacao IN VARCHAR2
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    
    INSERT INTO ReconhecimentoItens (usuario_id, url_imagem, tipo_item, data_reconhecimento, localizacao)
    VALUES (p_usuario_id, p_url_imagem, p_tipo_item, SYSDATE, p_localizacao);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Usuário não encontrado.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_reconhecimento_item', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de inserção de reconhecimento de item
DECLARE
    v_usuario_id NUMBER := 1; 
    v_url_imagem VARCHAR2(256) := 'http://example.com/imagem.jpg';
    v_tipo_item VARCHAR2(50) := 'Vidro';
    v_localizacao VARCHAR2(100) := 'São Paulo';
BEGIN
    inserir_reconhecimento_item(v_usuario_id, v_url_imagem, v_tipo_item, v_localizacao);
    DBMS_OUTPUT.PUT_LINE('Reconhecimento de item inserido com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir reconhecimento de item: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE atualizar_reconhecimento_item (
    p_reconhecimento_id IN NUMBER,
    p_usuario_id IN NUMBER,
    p_url_imagem IN VARCHAR2,
    p_tipo_item IN VARCHAR2,
    p_localizacao IN VARCHAR2
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    
    UPDATE ReconhecimentoItens
    SET usuario_id = p_usuario_id,
        url_imagem = p_url_imagem,
        tipo_item = p_tipo_item,
        localizacao = p_localizacao
    WHERE reconhecimento_id = p_reconhecimento_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Reconhecimento não encontrado.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_reconhecimento_item', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de atualização de reconhecimento de item
DECLARE
    v_reconhecimento_id NUMBER := 1; 
    v_usuario_id NUMBER := 1;
    v_url_imagem VARCHAR2(256) := 'http://example.com/novaimagem.jpg';
    v_tipo_item VARCHAR2(50) := 'Metal';
    v_localizacao VARCHAR2(100) := 'Rio de Janeiro';
BEGIN
    atualizar_reconhecimento_item(v_reconhecimento_id, v_usuario_id, v_url_imagem, v_tipo_item, v_localizacao);
    DBMS_OUTPUT.PUT_LINE('Reconhecimento de item atualizado com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao atualizar reconhecimento de item: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE excluir_reconhecimento_item (
    p_reconhecimento_id IN NUMBER
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario 
    FROM Usuarios 
    WHERE usuario_id = (SELECT usuario_id FROM ReconhecimentoItens WHERE reconhecimento_id = p_reconhecimento_id);
    
    DELETE FROM ReconhecimentoItens WHERE reconhecimento_id = p_reconhecimento_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Reconhecimento não encontrado.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_reconhecimento_item', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de exclusão de reconhecimento de item
DECLARE
    v_reconhecimento_id NUMBER := 1; 
BEGIN
    excluir_reconhecimento_item(v_reconhecimento_id);
    DBMS_OUTPUT.PUT_LINE('Reconhecimento de item excluído com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir reconhecimento de item: ' || SQLERRM);
END;




CREATE OR REPLACE PROCEDURE inserir_localizacao (
    p_nome_localizacao IN VARCHAR2,
    p_latitude IN NUMBER,
    p_longitude IN NUMBER,
    p_descricao IN VARCHAR2,
    p_item_id IN NUMBER,
    p_usuario_id IN NUMBER
) IS
BEGIN
    INSERT INTO Localizacoes (nome_localizacao, latitude, longitude, descricao, item_id, usuario_id)
    VALUES (p_nome_localizacao, p_latitude, p_longitude, p_descricao, p_item_id, p_usuario_id);
EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_localizacao', NULL, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;



-- Teste de inserção de localização
DECLARE
    v_nome_localizacao VARCHAR2(100) := 'Parque Ibirapuera';
    v_latitude NUMBER := -23.587416;
    v_longitude NUMBER := -46.657634;
    v_descricao VARCHAR2(256) := 'Parque em São Paulo';
    v_item_id NUMBER := 1; 
    v_usuario_id NUMBER := 2; 
BEGIN
    inserir_localizacao(v_nome_localizacao, v_latitude, v_longitude, v_descricao, v_item_id, v_usuario_id);
    DBMS_OUTPUT.PUT_LINE('Localização inserida com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir localização: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE atualizar_localizacao (
    p_localizacao_id IN NUMBER,
    p_nome_localizacao IN VARCHAR2,
    p_latitude IN NUMBER,
    p_longitude IN NUMBER,
    p_descricao IN VARCHAR2
) IS
BEGIN
    UPDATE Localizacoes
    SET nome_localizacao = p_nome_localizacao,
        latitude = p_latitude,
        longitude = p_longitude,
        descricao = p_descricao
    WHERE localizacao_id = p_localizacao_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Localização não encontrada.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, codigo_erro, mensagem_erro)
            VALUES ('atualizar_localizacao', v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de atualização de localização
DECLARE
    v_localizacao_id NUMBER := 1; 
    v_nome_localizacao VARCHAR2(100) := 'Parque Ibirapuera Novo';
    v_latitude NUMBER := -23.587416;
    v_longitude NUMBER := -46.657634;
    v_descricao VARCHAR2(256) := 'Parque em São Paulo atualizado';
BEGIN
    atualizar_localizacao(v_localizacao_id, v_nome_localizacao, v_latitude, v_longitude, v_descricao);
    DBMS_OUTPUT.PUT_LINE('Localização atualizada com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao atualizar localização: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE excluir_localizacao (
    p_localizacao_id IN NUMBER
) IS
BEGIN
    DELETE FROM Localizacoes WHERE localizacao_id = p_localizacao_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Localização não encontrada.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, codigo_erro, mensagem_erro)
            VALUES ('excluir_localizacao', v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de exclusão de localização
DECLARE
    v_localizacao_id NUMBER := 1;
BEGIN
    excluir_localizacao(v_localizacao_id);
    DBMS_OUTPUT.PUT_LINE('Localização excluída com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir localização: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE inserir_configuracao (
    p_usuario_id IN NUMBER,
    p_nome_configuracao IN VARCHAR2,
    p_valor_configuracao IN VARCHAR2
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    
    INSERT INTO Configuracoes (usuario_id, nome_configuracao, valor_configuracao)
    VALUES (p_usuario_id, p_nome_configuracao, p_valor_configuracao);
EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('inserir_configuracao', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de inserção de configuração
DECLARE
    v_usuario_id NUMBER := 1;
    v_nome_configuracao VARCHAR2(50) := 'Tema';
    v_valor_configuracao VARCHAR2(100) := 'Escuro';
BEGIN
    inserir_configuracao(v_usuario_id, v_nome_configuracao, v_valor_configuracao);
    DBMS_OUTPUT.PUT_LINE('Configuração inserida com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao inserir configuração: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE atualizar_configuracao (
    p_configuracao_id IN NUMBER,
    p_usuario_id IN NUMBER,
    p_nome_configuracao IN VARCHAR2,
    p_valor_configuracao IN VARCHAR2
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario FROM Usuarios WHERE usuario_id = p_usuario_id;
    
    UPDATE Configuracoes
    SET usuario_id = p_usuario_id,
        nome_configuracao = p_nome_configuracao,
        valor_configuracao = p_valor_configuracao
    WHERE configuracao_id = p_configuracao_id;
EXCEPTION
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('atualizar_configuracao', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;



-- Teste de atualização de configuração
DECLARE
    v_configuracao_id NUMBER := 1; 
    v_usuario_id NUMBER := 2;
    v_nome_configuracao VARCHAR2(50) := 'Tema';
    v_valor_configuracao VARCHAR2(100) := 'Claro';
BEGIN
    atualizar_configuracao(v_configuracao_id, v_usuario_id, v_nome_configuracao, v_valor_configuracao);
    DBMS_OUTPUT.PUT_LINE('Configuração atualizada com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao atualizar configuração: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE excluir_configuracao (
    p_configuracao_id IN NUMBER
) IS
    v_nome_usuario VARCHAR2(50);
BEGIN
    SELECT nome_usuario INTO v_nome_usuario 
    FROM Usuarios 
    WHERE usuario_id = (SELECT usuario_id FROM Configuracoes WHERE configuracao_id = p_configuracao_id);
    
    DELETE FROM Configuracoes WHERE configuracao_id = p_configuracao_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Configuração não encontrada.');
    WHEN OTHERS THEN
        DECLARE
            v_cod_erro NUMBER := SQLCODE;
            v_msg_erro VARCHAR2(4000) := SQLERRM;
        BEGIN
            INSERT INTO LogErros (nome_procedure, nome_usuario, codigo_erro, mensagem_erro)
            VALUES ('excluir_configuracao', v_nome_usuario, v_cod_erro, v_msg_erro);
            RAISE;
        END;
END;


-- Teste de exclusão de configuração
DECLARE
    v_configuracao_id NUMBER := 1; 
BEGIN
    excluir_configuracao(v_configuracao_id);
    DBMS_OUTPUT.PUT_LINE('Configuração excluída com sucesso.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao excluir configuração: ' || SQLERRM);
END;




--Bloco Anônimo 1: Listar todos os dados da tabela Usuarios
SET SERVEROUTPUT ON;
DECLARE
    CURSOR c_usuarios IS
        SELECT usuario_id, nome_usuario, email, data_registro, localizacao, foto_perfil
        FROM Usuarios;
    v_usuario_id Usuarios.usuario_id%TYPE;
    v_nome_usuario Usuarios.nome_usuario%TYPE;
    v_email Usuarios.email%TYPE;
    v_data_registro Usuarios.data_registro%TYPE;
    v_localizacao Usuarios.localizacao%TYPE;
    v_foto_perfil Usuarios.foto_perfil%TYPE;
BEGIN
    OPEN c_usuarios;
    LOOP
        FETCH c_usuarios INTO v_usuario_id, v_nome_usuario, v_email, v_data_registro, v_localizacao, v_foto_perfil;
        EXIT WHEN c_usuarios%NOTFOUND;
        
        -- Adicionando um bloco IF para verificar se o e-mail é válido
        IF v_email IS NOT NULL THEN
            DBMS_OUTPUT.PUT_LINE(
                'Nome: ' || v_nome_usuario || ', ' ||
                'Email: ' || v_email || ', ' ||
                'Data: ' || v_data_registro || ', ' ||
                'Localização: ' || v_localizacao || ', ' ||
                'Foto: ' || v_foto_perfil
            );
        END IF;
        
    END LOOP;
    CLOSE c_usuarios;
END;


-- Insert 1
INSERT INTO ItensReciclados (tipo_item, data_coleta, localizacao, quantidade)
VALUES ('Papel', TO_DATE('2024-06-01', 'YYYY-MM-DD'), 'Centro', 500);

-- Insert 2
INSERT INTO ItensReciclados (tipo_item, data_coleta, localizacao, quantidade)
VALUES ('Plástico', TO_DATE('2024-06-02', 'YYYY-MM-DD'), 'Zona Sul', 300);

-- Insert 3
INSERT INTO ItensReciclados (tipo_item, data_coleta, localizacao, quantidade)
VALUES ('Vidro', TO_DATE('2024-06-03', 'YYYY-MM-DD'), 'Zona Norte', 700);


--Bloco Anônimo 2: Listar e sumarizar dados da tabela ItensReciclados pelo campo tipo_item: agrupados por usuario_id
DECLARE
    v_total_geral INTEGER := 0;
BEGIN
    -- Imprimir cabeçalho da tabela
    DBMS_OUTPUT.PUT_LINE('Tipo_Item   Data_Coleta   Localizacao   Quantidade');
    
    -- Cursor para percorrer os dados da tabela ItensReciclados
    FOR item_reciclado IN (SELECT tipo_item, data_coleta, localizacao, quantidade FROM ItensReciclados) LOOP
        -- Imprimir cada linha da tabela
        DBMS_OUTPUT.PUT_LINE(item_reciclado.tipo_item || '   ' || item_reciclado.data_coleta || '   ' || item_reciclado.localizacao || '   ' || item_reciclado.quantidade);
        
        -- Atualizar total geral
        v_total_geral := v_total_geral + item_reciclado.quantidade;
    END LOOP;
    
    -- Imprimir subtotal e total geral
    DBMS_OUTPUT.PUT_LINE('Sub-Total   ' || v_total_geral);
    DBMS_OUTPUT.PUT_LINE('Total Geral   ' || v_total_geral);
    
END;




--Bloco Anônimo 3: Atualizar e listar recompensas de um usuário específico
SET SERVEROUTPUT ON;
DECLARE
    CURSOR c_recompensas IS
        SELECT recompensa_id, usuario_id, pontos, tipo_recompensa, data_resgate
        FROM Recompensas
        WHERE usuario_id = 2; 

    v_recompensa_id Recompensas.recompensa_id%TYPE;
    v_usuario_id Recompensas.usuario_id%TYPE;
    v_pontos Recompensas.pontos%TYPE;
    v_tipo_recompensa Recompensas.tipo_recompensa%TYPE;
    v_data_resgate Recompensas.data_resgate%TYPE;
BEGIN
    OPEN c_recompensas;
    LOOP
        FETCH c_recompensas INTO v_recompensa_id, v_usuario_id, v_pontos, v_tipo_recompensa, v_data_resgate;
        EXIT WHEN c_recompensas%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('ID: ' || v_recompensa_id || ', 
        Usuário ID: ' || v_usuario_id || ', 
        Pontos: ' || v_pontos || ', 
        Tipo: ' || v_tipo_recompensa || ', 
        Data: ' || v_data_resgate);

        -- Atualizar recompensa adicionando 10 pontos
        UPDATE Recompensas
        SET pontos = pontos + 10
        WHERE recompensa_id = v_recompensa_id;

        DBMS_OUTPUT.PUT_LINE('Recompensa atualizada: ID ' || v_recompensa_id || ' com novos pontos: ' || (v_pontos + 10));
    END LOOP;
    CLOSE c_recompensas;
END;


--Bloco Anônimo 4: Listar e sumarizar dados da tabela Localizacoes agrupados por nome_localizacao
SET SERVEROUTPUT ON;
DECLARE
    CURSOR c_localizacoes IS
        SELECT localizacao_id, nome_localizacao, latitude, longitude, descricao
        FROM Localizacoes
        ORDER BY nome_localizacao;

    v_localizacao_id Localizacoes.localizacao_id%TYPE;
    v_nome_localizacao Localizacoes.nome_localizacao%TYPE;
    v_latitude Localizacoes.latitude%TYPE;
    v_longitude Localizacoes.longitude%TYPE;
    v_descricao Localizacoes.descricao%TYPE;

    v_total_localizacoes NUMBER := 0;
    v_sub_total NUMBER := 0;
    v_current_nome_localizacao VARCHAR2(100) := NULL;
BEGIN
    OPEN c_localizacoes;
    LOOP
        FETCH c_localizacoes INTO v_localizacao_id, v_nome_localizacao, v_latitude, v_longitude, v_descricao;
        EXIT WHEN c_localizacoes%NOTFOUND;

        IF v_current_nome_localizacao != v_nome_localizacao THEN
            IF v_current_nome_localizacao IS NOT NULL THEN
                DBMS_OUTPUT.PUT_LINE('Sub-Total para ' || v_current_nome_localizacao || ': ' || v_sub_total);
                DBMS_OUTPUT.PUT_LINE('');
            END IF;
            v_current_nome_localizacao := v_nome_localizacao;
            v_sub_total := 0;
        END IF;

        DBMS_OUTPUT.PUT_LINE('ID: ' || v_localizacao_id || ', 
        Nome: ' || v_nome_localizacao || ', 
        Latitude: ' || v_latitude || ', 
        Longitude: ' || v_longitude || ', 
        Descrição: ' || v_descricao);
        v_sub_total := v_sub_total + 1;
        v_total_localizacoes := v_total_localizacoes + 1;
    END LOOP;

    IF v_current_nome_localizacao IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Sub-Total para ' || v_current_nome_localizacao || ': ' || v_sub_total);
    END IF;

    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('   Total Geral de Localizações: ' || v_total_localizacoes);
    CLOSE c_localizacoes;
END;
